[CustomElementRegistry.html]
  type: testharness
  [CustomElementRegistry interface must have define as a method]
    expected: FAIL

  [customElements.define must throw when the element interface is not a constructor]
    expected: FAIL

  [customElements.define must not throw the constructor is HTMLElement]
    expected: FAIL

  [customElements.define must throw with an invalid name]
    expected: FAIL

  [customElements.define must throw when there is already a custom element of the same name]
    expected: FAIL

  [customElements.define must throw a NotSupportedError when there is already a custom element with the same class]
    expected: FAIL

  [customElements.define must throw a NotSupportedError when element definition is running flag is set]
    expected: FAIL

  [customElements.define must check IsConstructor on the constructor before checking the element definition is running flag]
    expected: FAIL

  [customElements.define must validate the custom element name before checking the element definition is running flag]
    expected: FAIL

  [customElements.define unset the element definition is running flag before upgrading custom elements]
    expected: FAIL

  [customElements.define must not throw when defining another custom element in a different global object during Get(constructor, "prototype")]
    expected: FAIL

  [Custom Elements: CustomElementRegistry interface]
    expected: FAIL

  [customElements.define must get "prototype" property of the constructor]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while getting "prototype" property of the constructor]
    expected: FAIL

  [customElements.define must throw when "prototype" property of the constructor is not an object]
    expected: FAIL

  [customElements.define must get callbacks of the constructor prototype]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while getting callbacks on the constructor prototype]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while converting a callback value to Function callback type]
    expected: FAIL

  [customElements.define must get "observedAttributes" property on the constructor prototype when "attributeChangedCallback" is present]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while getting observedAttributes on the constructor prototype]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while converting the value of observedAttributes to sequence<DOMString>]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while iterating over observedAttributes to sequence<DOMString>]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while retrieving Symbol.iterator on observedAttributes]
    expected: FAIL

  [customElements.define must not throw even if "observedAttributes" fails to convert if "attributeChangedCallback" is not defined]
    expected: FAIL

  [customElements.define must define an instantiatable custom element]
    expected: FAIL

  [customElements.define must upgrade elements in the shadow-including tree order]
    expected: FAIL

  [CustomElementRegistry interface must have get as a method]
    expected: FAIL

  [customElements.get must return undefined when the registry does not contain an entry with the given name]
    expected: FAIL

  [customElements.get must return undefined when the registry does not contain an entry with the given name even if the name was not a valid custom element name]
    expected: FAIL

  [customElements.get return the constructor of the entry with the given name when there is a matching entry.]
    expected: FAIL

  [customElements.whenDefined must return a promise for a valid custom element name]
    expected: FAIL

  [customElements.whenDefined must return the same promise each time invoked for a valid custom element name which has not been defined]
    expected: FAIL

  [customElements.whenDefined must return an unresolved promise when the registry does not contain the entry with the given name]
    expected: FAIL

  [customElements.whenDefined must return a rejected promise when the given name is not a valid custom element name]
    expected: FAIL

  [customElements.whenDefined must return a resolved promise when the registry contains the entry with the given name]
    expected: FAIL

  [customElements.whenDefined must return a new resolved promise each time invoked when the registry contains the entry with the given name]
    expected: FAIL

  [A promise returned by customElements.whenDefined must be resolved by "define"]
    expected: FAIL

